package de.ait.homework41;

import com.github.javafaker.Faker;

public class AmazonApp {

    public static void main(String[] args) {
        Faker faker = new Faker();

        String bookName = faker.book().title();
        String bookAuthor = faker.book().author();
        double bookPrice = faker.number().randomDouble(2, 100, 1000); // цена от 100 до 1000 руб.

        // Генерация случайных данных для электроники
        String electronicsName = faker.commerce().productName();
        String electronicsBrand = faker.company().name();
        double electronicsPrice = faker.number().randomDouble(2, 10000, 50000); // цена от 10000 до 50000 руб.

        Book book1 = new Book(bookName, bookPrice, bookAuthor);
        Electronics electronics1 = new Electronics(electronicsName, electronicsPrice, electronicsBrand);

        // Создание корзины для товаров
        Cart<Product> cart = new Cart<>();

        // Добавление товаров в корзину
        cart.addProduct(book1);
        cart.addProduct(electronics1);

        // Вывод информации о товарах в корзине
        System.out.println("Содержимое корзины:");
        cart.printCartDetails();

        // Подсчёт общей стоимости товаров
        System.out.println("Общая стоимость: " + cart.getTotalPrice() + " руб.");

        // Удаление товара по названию
        boolean isRemoved = cart.removeProductByName(book1.getName());
        if (isRemoved) {
            System.out.println("\nТовар '" + book1.getName() + "' был удален.");
        } else {
            System.out.println("\nТовар '" + book1.getName() + "' не найден в корзине.");
        }

        // Вывод информации о товарах после удаления
        System.out.println("\nСодержимое корзины после удаления:");
        cart.printCartDetails();

        // Подсчёт общей стоимости после удаления
        System.out.println("\nОбщая стоимость после удаления: " + cart.getTotalPrice() + " руб.");

        // Дополнительное задание: сортировка товаров по цене
        System.out.println("\nТовары, отсортированные по цене:");
        cart.getItems().sort(null);  // Сортировка по умолчанию (по цене)
        cart.printCartDetails();

        // Дополнительное задание: фильтрация товаров по ценовому диапазону
        System.out.println("--------------------");
        System.out.println("\nФильтрация товаров с ценой от 5000 до 15000 руб:");
        cart.filterByPrice(5000, 15000).forEach(product -> System.out.println(product.getDescription()));

        // Дополнительное задание: создание склада и добавление товаров на склад
        Warehouse<Product> warehouse = new Warehouse<>();
        warehouse.addStock(book1);
        warehouse.addStock(electronics1);

        // Поиск товара на складе
        Product foundProduct = warehouse.findProduct(book1.getName());
        if (foundProduct != null) {
            System.out.println("\nТовар найден на складе: " + foundProduct.getDescription());
        } else {
            System.out.println("\nТовар не найден на складе.");
        }

        // Вывод количества товара на складе
        System.out.println("\nКоличество товара '" + book1.getName() + "' на складе: " + warehouse.getProductCount(book1.getName()));
    }
}

/*
1. Создание объектов разных типов
Создадим несколько объектов различных типов товаров, например:

Книга: для этого мы будем использовать класс Book, который будет хранить данные о названии книги, цене и авторе.
Электроника: для этого создадим объект класса Electronics, который будет хранить название продукта, цену и бренд.
Мы можем использовать библиотеку Faker для имитации реальности

2. Добавление товаров в корзину
После создания товаров, мы добавим их в корзину. Корзина будет представлять собой объект класса Cart,
который хранит список товаров. Для этого мы будем использовать метод addProduct(), чтобы добавить созданные товары в корзину.

3. Удаление товара по названию
Следующим шагом мы попробуем удалить товар из корзины по его названию с помощью метода removeProductByName().
Мы можем сначала попытаться удалить товар, который точно есть в корзине (например, по названию книги),
а затем попробовать удалить товар, которого нет в корзине, чтобы убедиться, что метод корректно работает и возвращает правильный результат.
Затем, после удаления товара, мы снова посчитаем общую стоимость товаров в корзине, чтобы убедиться, что она обновляется корректно.

4. Подсчёт общей стоимости в корзине
После того как мы добавили товары в корзину, мы будем использовать метод getTotalPrice(),
чтобы подсчитать итоговую стоимость всех товаров, находящихся в корзине.

5. Вывод информации о товарах
Для вывода информации о товарах мы используем метод printCartDetails(), который будет выводить описание каждого товара.
Это описание будет генерироваться с помощью переопределенного метода getDescription(),
который мы добавили в классы Book и Electronics. Метод getDescription() будет возвращать строку, содержащую информацию о товаре,
такую как его название, цена, автор или бренд.

Примерный план действий:
Создаём товары: с помощью Faker генерируем случайные данные для книги и электроники.
Добавляем товары в корзину: добавляем эти товары в корзину с помощью метода addProduct().
Выводим содержимое корзины: выводим информацию обо всех товарах в корзине с помощью printCartDetails().
Подсчитываем стоимость: считаем общую стоимость товаров в корзине с помощью getTotalPrice().
Удаляем товар по названию: удаляем один товар (например, книгу) из корзины по названию с помощью метода removeProductByName().
Выводим обновлённое содержимое корзины: выводим информацию о товарах после удаления товара.
Считаем обновлённую стоимость: снова подсчитываем общую стоимость после удаления товара.
Что мы ожидаем увидеть:
Сначала будут выведены все товары в корзине с их описанием и общей стоимостью.
После удаления товара из корзины, мы увидим, что этот товар исчез из корзины, и стоимость корзины изменилась.
Мы также сможем увидеть результат фильтрации и сортировки товаров по цене (если эти функции были реализованы).
Таким образом, мы проверим функциональность корзины и работу с товарами в ней, включая добавление, удаление,
 подсчёт стоимости и вывод информации о товарах.
 */

